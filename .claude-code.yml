# Claude Code Configuration for QA Web System
# Generated at: 2025-01-10

# プロジェクト情報
project:
  name: qa-web-system
  type: web-application
  language: typescript

# レビュー対象ファイルの設定
include:
  # TypeScript/JavaScript ファイル
  - "src/**/*.ts"
  - "src/**/*.tsx"
  - "src/**/*.js"
  - "src/**/*.jsx"
  # 設定ファイル
  - "*.json"
  - "*.yml"
  - "*.yaml"
  - "*.config.js"
  - "*.config.ts"
  # Prisma スキーマ
  - "prisma/*.prisma"
  # テストファイル
  - "**/*.test.ts"
  - "**/*.test.tsx"
  - "**/*.spec.ts"
  - "**/*.spec.tsx"

# レビュー対象外ファイルの設定
exclude:
  # 依存関係
  - "node_modules/**"
  - ".next/**"
  - "coverage/**"
  # ビルド成果物
  - "dist/**"
  - "build/**"
  - "out/**"
  # 環境設定
  - ".env*"
  - "*.env"
  # IDEとGit
  - ".git/**"
  - ".idea/**"
  - ".vscode/**"
  # ログとキャッシュ
  - "*.log"
  - "*.cache"
  - ".DS_Store"
  # 自動生成ファイル
  - "package-lock.json"
  - "yarn.lock"
  - "pnpm-lock.yaml"
  # Prisma生成ファイル
  - "prisma/migrations/**"

# カスタムレビュールール
rules:
  # Next.js/React特有のルール
  - id: "nextjs-best-practices"
    description: "Next.js 15のベストプラクティスに従っているか確認"
    severity: "warning"
    patterns:
      - pattern: "getServerSideProps"
        message: "App Routerでは、getServerSidePropsの代わりにServer Componentsを使用してください"
      - pattern: "getStaticProps"
        message: "App Routerでは、getStaticPropsの代わりにasync componentsを使用してください"
  
  # セキュリティルール
  - id: "security-checks"
    description: "セキュリティ上の問題をチェック"
    severity: "error"
    patterns:
      - pattern: "process\\.env\\."
        message: "環境変数の直接参照は避け、設定モジュールを経由してください"
      - pattern: "dangerouslySetInnerHTML"
        message: "XSS攻撃のリスクがあります。使用前に適切なサニタイズを確認してください"
  
  # アクセシビリティルール（WCAG 2.2準拠）
  - id: "wcag-compliance"
    description: "WCAG 2.2準拠のアクセシビリティチェック"
    severity: "warning"
    patterns:
      - pattern: "<img(?![^>]*alt=)"
        message: "画像にはalt属性を設定してください（WCAG 2.2）"
      - pattern: "onClick(?![^>]*onKeyDown)"
        message: "クリックイベントにはキーボードイベントも実装してください（WCAG 2.2）"
  
  # Prismaベストプラクティス
  - id: "prisma-optimization"
    description: "Prismaクエリの最適化"
    severity: "warning"
    patterns:
      - pattern: "findMany\\(\\)"
        message: "大量のデータを取得する可能性があります。必要に応じてtakeやskipを使用してページネーションを実装してください"
      - pattern: "include:.*include:"
        message: "ネストしたincludeは、N+1問題を引き起こす可能性があります"
  
  # 共通化推奨ルール
  - id: "code-reusability"
    description: "コードの再利用性向上"
    severity: "info"
    patterns:
      - pattern: "(function|const).*\\{[\\s\\S]{200,}"
        message: "関数が長すぎます。より小さな関数に分割することを検討してください"
  
  # API エンドポイントのセキュリティ
  - id: "api-security"
    description: "APIエンドポイントのセキュリティチェック"
    severity: "error"
    patterns:
      - pattern: "export\\s+(async\\s+)?function\\s+(GET|POST|PUT|DELETE|PATCH)(?!.*auth)"
        message: "APIルートハンドラーで認証チェックが行われていない可能性があります"
  
  # ファイルアップロードのセキュリティ
  - id: "file-upload-security"
    description: "ファイルアップロード処理のセキュリティ"
    severity: "error"
    patterns:
      - pattern: "\\.(fileType|mimeType|contentType)(?!.*includes\\()"
        message: "ファイルタイプの検証が必要です。許可されたファイルタイプのみを受け入れてください"
  
  # Zustand ストアのベストプラクティス
  - id: "zustand-best-practices"
    description: "Zustand状態管理のベストプラクティス"
    severity: "warning"
    patterns:
      - pattern: "create\\(\\(set.*\\{[\\s\\S]{500,}"
        message: "Zustandストアが大きすぎます。機能ごとに分割することを検討してください"

# プロジェクトコンテキスト
context:
  description: |
    QA Web System - 品質保証Webアプリケーション
    
    技術スタック:
    - Next.js 15 (App Router)
    - React 19
    - TypeScript 5.8
    - Prisma ORM 6.7
    - Material-UI 7
    - Tailwind CSS 4
    - Zustand (状態管理)
    - React Hook Form + Zod (フォームバリデーション)
    - Jest (テスト)
    
    プロジェクトの特徴:
    - 認証機能付きの品質保証管理システム
    - プロジェクト・質問・回答の管理
    - 通知システム
    - ファイルアップロード機能
    - WCAG 2.2準拠のアクセシブルなUI
  
  guidelines:
    - "既存のプロジェクトへの影響を最小限にする"
    - "コードの可読性を重視し、共通処理はUtilsやComponentsにまとめる"
    - "WCAG 2.2に準拠したアクセシブルな実装"
    - "TypeScriptの型安全性を最大限活用"
    - "Prismaクエリは必要最小限のデータのみ取得"

# レビュー設定
review:
  # レビューの厳格度 (strict, normal, lenient)
  severity_level: "normal"
  # 最大エラー数（これを超えるとレビュー失敗）
  max_errors: 10
  # 最大警告数（これを超えるとレビュー失敗）
  max_warnings: 50
  # レビュー言語
  language: "ja" 